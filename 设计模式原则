开放封闭原则：抽象化是开闭原则的关键,扩展不需要修改现有代码，为系统定义一个相对稳定的抽象层，而将不同的实现行为移至具体的实现层中完成。
里式替换原则：基类变为子类程序不会有问题，反之则不行。喜欢动物，则喜欢狗，喜欢狗但是不一定喜欢动物。
单一职责原则：一个类职责不要太多
依赖倒转原则：要针对接口编程，而不是针对实现编程。将具体类的对象通过依赖注入.
接口隔离原则(Interface  Segregation Principle, ISP)：使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。
迪米特法则(Law of  Demeter, LoD)：一个软件实体应当尽可能少地与其他实体发生相互作用。不要和“陌生人”说话、只与你的直接朋友通信，通过引入一个合理的第
三者来降低现有对象之间的耦合度。
