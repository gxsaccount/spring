aop：面向切面编程
切面Aspect：通知+切点：它是什么，在何时，何处完成功能。  

通知advice：
  从连接点插入，添加新行为。定义切面的“何时”与“什么”
  before:方法调用之前
  after:方法完成之后
  after-returning:方法成功执行后
  after-throwing:方法抛出异常后
  around:被通知的方法调用之前和调用之后
连接点joinpoint：切面的插入点，spring只支持方法及别的连接点。对应before，after，after-returning，after-throwing，around
切点poincut：
  切点定义切面需要织入的一个或多个连接点。定义切面的“何处”
引入：向现有的类添加新属性或方法
织入：把切面应用到目标对象并创建新的代理对象的过程。
  织入时机：
    编译期：切面在目标类编译时织入。如AspectJ通过“织入编译器”织入切面。
    类加载器：切面在类加载时织入。如AspectJ5的加载织入，用“织入类加载器”织入
    运行期：在应用运行时织入。即“动态代理”。SpringAOP的织入方法。

spring对AOP的支持(动态代理)
基于代理的经典AOP（ProxyFactory Bean）
纯POJO切面（XML）
@AspectJ注解驱动切面（注解）
注入式AspectJ切面

@Aspect：指明此类应用AOP技术，可以添加如下注解进行织入
@After、@Before、@AfterReturning、@AfterThrowing、@Around

@Pointcut标注指明切点，作为@After等的参数，不用此标注的话，则用权限定名作为参数。

使用切面需要在配置类上配置自动注解
@EnableAspectJAutoProxy（和@ComponentScan和@Configuration）
或者用XML<aop:aspectj-autoproxy>


底层实现:
代理机制:
* Spring 的 AOP 的底层用到两种代理机制：
 * JDK 的动态代理 :针对实现了接口的类产生代理.
 * Cglib 的动态代理 :针对没有实现接口的类产生代理. 应用的是底层的字节码增强的技术 生成当前类
的子类对象.  


1.2.5.1 JDK 动态代理增强一个类中方法:
public class MyJDKProxy implements InvocationHandler {
传智播客——专注于 Java、.Net 和 Php、网页平面设计工程师的培训
private UserDao userDao;
public MyJDKProxy(UserDao userDao) {
this.userDao = userDao;
}
// 编写工具方法：生成代理：
public UserDao createProxy(){
UserDao userDaoProxy = (UserDao)
Proxy.newProxyInstance(userDao.getClass().getClassLoader(),
userDao.getClass().getInterfaces(), this);
return userDaoProxy;
}
@Override
public Object invoke(Object proxy, Method method, Object[] args) throws Throwable
{
if("save".equals(method.getName())){
System.out.println("权限校验================");
}
return method.invoke(userDao, args);
}
}
1.2.5.2 Cglib 动态代理增强一个类中的方法:
public class MyCglibProxy implements MethodInterceptor{
private CustomerDao customerDao;
public MyCglibProxy(CustomerDao customerDao){
this.customerDao = customerDao;
}
// 生成代理的方法:
public CustomerDao createProxy(){
// 创建 Cglib 的核心类:
Enhancer enhancer = new Enhancer();
// 设置父类:
enhancer.setSuperclass(CustomerDao.class);
// 设置回调:
enhancer.setCallback(this);
// 生成代理：
传智播客——专注于 Java、.Net 和 Php、网页平面设计工程师的培训
CustomerDao customerDaoProxy = (CustomerDao) enhancer.create();
return customerDaoProxy;
}
@Override
public Object intercept(Object proxy, Method method, Object[] args, MethodProxy
methodProxy) throws Throwable {
if("delete".equals(method.getName())){
Object obj = methodProxy.invokeSuper(proxy, args);
System.out.println("日志记录================");
return obj;
}
return methodProxy.invokeSuper(proxy, args);
}
}




目标类：
public class ProductDao {
public void save(){
System.out.println("保存商品...");
}
public void update(){
System.out.println("修改商品...");
}
public void delete(){
System.out.println("删除商品...");
}
public void find(){
System.out.println("查询商品...");
}
}
配置目标类：
<!-- 目标类============ -->
 <bean id="productDao" class="cn.itcast.spring.demo4.ProductDao"></bean> 
 
 开启aop
 <aop:aspectj-autoproxy/>
 @Aspect:定义切面类的注解
 
通知类型:
 * @Before :前置通知
 * @AfterReturing :后置通知
 * @Around :环绕通知
 * @After :最终通知
 * @AfterThrowing :异常抛出通知.
@Pointcut:定义切入点的注解
切面类
@Aspect
public class MyAspectAnno {
@Before("MyAspectAnno.pointcut1()")
public void before(){
System.out.println("前置通知===========");
}
@Pointcut("execution(* cn.itcast.spring.demo4.ProductDao.save(..))")
private void pointcut1(){}
}
<bean id="myAspectAnno" class="cn.itcast.spring.demo4.MyAspectAnno"></bean> 
